image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
  - unzip -q android-sdk.zip -d android-sdk-linux
    
  - mkdir android-sdk-linux/licenses
  - printf "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e" > android-sdk-linux/licenses/android-sdk-license
  - printf "84831b9409646a918e30573bab4c9c91346d8abd" > android-sdk-linux/licenses/android-sdk-preview-license
  - android-sdk-linux/tools/bin/sdkmanager --update > update.log
  - android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}" "extras;google;m2repository" "extras;android;m2repository" > installPlatform.log

  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter android-${ANDROID_COMPILE_SDK}
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter platform-tools
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter build-tools-${ANDROID_BUILD_TOOLS}
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter extra-android-m2repository
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter extra-google-google_play_services
  - echo y | $ANDROID_HOME/tools/android update sdk --no-ui --all --filter extra-google-m2repository
  - export PATH=$PATH:$ANDROID_HOME
  - chmod +x ./gradlew

stages:
  - build
  - test
  
build:
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
    - app/build/outputs/

unitTests:
  stage: test
  script:
    - ./gradlew test
    
functionalTests:
  stage: test
  script:
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager "system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"
    - echo y | $ANDROID_HOME/tools/bin/sdkmanager --licenses
    - echo no | $ANDROID_HOME/tools/bin/avdmanager create avd -n test -k "system-images;android-27;google_apis;x86"
    - $ANDROID_HOME/tools/emulator -avd test -no-window -no-audio &

    - |-
      # Wait emulator bootanim stopping
      set +e

      bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
      failcounter=0
      timeout_in_sec=720

      until [[ "$bootanim" =~ "stopped" ]]; do

        # Bootanim timeout
        if [[ $failcounter -gt timeout_in_sec ]]; then
          echo "Failed to start emulator : Timeout ($timeout_in_sec seconds) reached;"
          
          # Send webhook notification
          #curl -X POST -H 'Content-type: application/json' \
          #  --data '{"text":"Emulator timeout : ${bootanim}"}' \
          #  $WEBHOOK_NOTIF

          exit 1
        fi

        # Emulator launch failed
        if [[ ! "$bootanim" =~ "daemon not running; starting now" && ! "$bootanim" =~ "device offline" && ! "$bootanim" = "" && ! "$bootanim" = "running" ]]; then
          echo "Failed to start emulator : ${bootanim}"
          
          # Send webhook notification
          #curl -X POST -H 'Content-type: application/json' \
          #  --data '{"text":"Emulator error : ${bootanim}"}' \
          #  $WEBHOOK_NOTIF

          exit 1
        fi
        
        echo "Wait emulator (state: ${bootanim}) ; Timeout $(($timeout_in_sec-$failcounter))"
        sleep 1
        let "failcounter += 1"
        
        bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
      done
      echo "Emulator is ready"  
      
    - $ANDROID_HOME/platform-tools/adb shell input keyevent 82
    - ./gradlew cAT